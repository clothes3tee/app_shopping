/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package viewForm;

import dao.GioHangDao;
import dao.KetQuaDao;
import dao.ThucPhamDao;
import helper.DataValidator;
import helper.MessageDialogHelper;
import java.awt.event.KeyEvent;
import static java.lang.String.valueOf;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.JTextPane;
import javax.swing.table.DefaultTableModel;
import helper.Bang;
import model.GioHang;
import model.KetQua;
import model.PhuongAn;
import model.ThucPham;
import helper.XFile;

/**
 *
 * @author Admin
 */
public class PaneAddCart extends javax.swing.JPanel {

    FrmMain parent;
    private DefaultTableModel tblModel;
    private Bang table = new Bang();
    private ArrayList<ThucPham> listGioHang = new ArrayList<>();
    private ArrayList<PhuongAn> phuongAn = new ArrayList<>();
    private int TGT, soTienCL, giaLNTT;
    private float canTren;
    private long soTienMua, tienMua;
    private String maGH, tenGH;
    public int c = 0;
    private float tongKhoiLuong = 0, tongGTDD = 0;

    /**
     * Creates new form PaneAddCart
     */
    public PaneAddCart() {
        initComponents();
        table.initTableGioHang(tblGioHang);
        table.initTableKetQua(tblKetQua);
        table.tableModel(tblGioHang);
        table.tableModelKQ(tblKetQua);
        maGH = new String("");
        tenGH = new String();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblGioHang = new javax.swing.JTable();
        txtSoTienMua = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        lblSTConLai = new javax.swing.JLabel();
        lblTKL = new javax.swing.JLabel();
        lblTGDD = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblKetQua = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        txaGhiChu = new javax.swing.JTextPane();

        jPanel3.setBackground(new java.awt.Color(230, 236, 230));

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        jLabel2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel2.setText("VND");

        jLabel1.setBackground(new java.awt.Color(102, 102, 255));
        jLabel1.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        jLabel1.setText("Số tiền sẽ mua:  ");

        tblGioHang.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "STT", "Mã thực phẩm", "Tên thực phẩm", "Loại thực phẩm", "Khối lượng (g)", "Giá trị dinh dưỡng (calo/100g)", "Giá tiền mỗi 100g (VND)", "Phương án"
            }
        ));
        tblGioHang.setGridColor(new java.awt.Color(51, 51, 51));
        tblGioHang.setShowGrid(true);
        tblGioHang.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tblGioHangMouseEntered(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tblGioHangMousePressed(evt);
            }
        });
        tblGioHang.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblGioHangKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(tblGioHang);
        if (tblGioHang.getColumnModel().getColumnCount() > 0) {
            tblGioHang.getColumnModel().getColumn(0).setMinWidth(40);
            tblGioHang.getColumnModel().getColumn(0).setPreferredWidth(40);
            tblGioHang.getColumnModel().getColumn(0).setMaxWidth(40);
            tblGioHang.getColumnModel().getColumn(1).setMinWidth(80);
            tblGioHang.getColumnModel().getColumn(1).setMaxWidth(80);
            tblGioHang.getColumnModel().getColumn(2).setMinWidth(160);
            tblGioHang.getColumnModel().getColumn(2).setMaxWidth(160);
            tblGioHang.getColumnModel().getColumn(3).setMinWidth(90);
            tblGioHang.getColumnModel().getColumn(3).setMaxWidth(90);
            tblGioHang.getColumnModel().getColumn(4).setMinWidth(100);
            tblGioHang.getColumnModel().getColumn(4).setMaxWidth(100);
            tblGioHang.getColumnModel().getColumn(5).setMinWidth(180);
            tblGioHang.getColumnModel().getColumn(5).setMaxWidth(180);
            tblGioHang.getColumnModel().getColumn(6).setMinWidth(160);
            tblGioHang.getColumnModel().getColumn(6).setMaxWidth(160);
            tblGioHang.getColumnModel().getColumn(7).setMinWidth(90);
            tblGioHang.getColumnModel().getColumn(7).setMaxWidth(90);
        }

        txtSoTienMua.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtSoTienMua.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSoTienMuaKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(274, 274, 274)
                        .addComponent(jLabel1)
                        .addGap(58, 58, 58)
                        .addComponent(txtSoTienMua, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(jLabel2))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1342, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtSoTienMua, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(35, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(247, 247, 241));

        lblSTConLai.setFont(new java.awt.Font("Arial", 1, 15)); // NOI18N
        lblSTConLai.setForeground(new java.awt.Color(51, 102, 0));
        lblSTConLai.setText("Số tiền còn lại:  0 VND");

        lblTKL.setFont(new java.awt.Font("Arial", 1, 15)); // NOI18N
        lblTKL.setForeground(new java.awt.Color(51, 102, 0));
        lblTKL.setText("Tổng khối lượng: 0 Kg");

        lblTGDD.setFont(new java.awt.Font("Arial", 1, 15)); // NOI18N
        lblTGDD.setForeground(new java.awt.Color(51, 102, 0));
        lblTGDD.setText("Tổng giá trị dinh dưỡng: 0 Calo");

        jLabel6.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(204, 51, 0));
        jLabel6.setText("Phương án tối ưu dược đưa ra như sau:");

        tblKetQua.setBackground(new java.awt.Color(248, 243, 243));
        tblKetQua.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "STT", "Mã thực phẩm", "Tên thực phẩm", "Loại thực phẩm", "Khối lượng (g)", "Giá trị dinh dưỡng (calo/100g)", "Giá tiền mỗi 100g (VND)", "Phương án"
            }
        ));
        tblKetQua.setGridColor(new java.awt.Color(0, 0, 153));
        tblKetQua.setShowGrid(true);
        jScrollPane3.setViewportView(tblKetQua);
        if (tblKetQua.getColumnModel().getColumnCount() > 0) {
            tblKetQua.getColumnModel().getColumn(0).setMinWidth(50);
            tblKetQua.getColumnModel().getColumn(0).setPreferredWidth(50);
            tblKetQua.getColumnModel().getColumn(0).setMaxWidth(50);
            tblKetQua.getColumnModel().getColumn(1).setMinWidth(80);
            tblKetQua.getColumnModel().getColumn(1).setMaxWidth(80);
            tblKetQua.getColumnModel().getColumn(2).setMinWidth(160);
            tblKetQua.getColumnModel().getColumn(2).setMaxWidth(160);
            tblKetQua.getColumnModel().getColumn(3).setMinWidth(90);
            tblKetQua.getColumnModel().getColumn(3).setMaxWidth(90);
            tblKetQua.getColumnModel().getColumn(4).setMinWidth(100);
            tblKetQua.getColumnModel().getColumn(4).setMaxWidth(100);
            tblKetQua.getColumnModel().getColumn(5).setMinWidth(180);
            tblKetQua.getColumnModel().getColumn(5).setMaxWidth(180);
            tblKetQua.getColumnModel().getColumn(6).setMinWidth(160);
            tblKetQua.getColumnModel().getColumn(6).setMaxWidth(160);
            tblKetQua.getColumnModel().getColumn(7).setMinWidth(90);
            tblKetQua.getColumnModel().getColumn(7).setMaxWidth(90);
        }

        jLabel3.setFont(new java.awt.Font("Arial", 1, 15)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(179, 137, 12));
        jLabel3.setText("Ghi chú:");

        jScrollPane4.setViewportView(txaGhiChu);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 1342, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(787, 787, 787))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(11, 11, 11)
                                .addComponent(lblSTConLai)
                                .addGap(156, 156, 156)
                                .addComponent(lblTKL)
                                .addGap(122, 122, 122)
                                .addComponent(lblTGDD)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel3)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21)))
                .addContainerGap(45, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblSTConLai)
                            .addComponent(lblTKL)
                            .addComponent(lblTGDD)
                            .addComponent(jLabel3))
                        .addGap(25, 25, 25)
                        .addComponent(jLabel6))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tblGioHangKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblGioHangKeyPressed
        if (KeyEvent.VK_DELETE == evt.getKeyCode()) {
            if (MessageDialogHelper.showConfirmDialog(this, "Bạn có muốn XÓA  thực phẩm này hay không?", "Câu hỏi") == JOptionPane.YES_OPTION) {
                if (deleteList()) {
                    MessageDialogHelper.showMessageDialog(this, c + " thực phẩm đã XÓA thành công.", "Thông báo");
                }
            }
            return;
        }
    }//GEN-LAST:event_tblGioHangKeyPressed

    private void txtSoTienMuaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSoTienMuaKeyPressed
        if (KeyEvent.VK_ENTER == evt.getKeyCode()) {
            if (testData()) {
                return;
            } else {
                giaiThuat(1);
            }
        }
    }//GEN-LAST:event_txtSoTienMuaKeyPressed

    private void tblGioHangMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblGioHangMousePressed

    }//GEN-LAST:event_tblGioHangMousePressed

    private void tblGioHangMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblGioHangMouseEntered

    }//GEN-LAST:event_tblGioHangMouseEntered

    public void addThucPham(ArrayList<String> list) throws Exception {
        int count = 0, fail = 0, change = 0;
        StringBuilder sb = new StringBuilder();
        StringBuilder sbr = new StringBuilder();
        StringBuilder str = new StringBuilder();
        ThucPhamDao dao = new ThucPhamDao();
        if (list.size() == 0) {
            return;
        }
        for (int i = 0; i < list.size(); i++) {
            int e = 0;
            ThucPham tp = dao.findByID(list.get(i));
            for (int j = 0; j < listGioHang.size(); j++) {
                if (tp.getMaThucPham().equals(listGioHang.get(j).getMaThucPham())) {
                    if (tp.getLoaiThucPham().equals(listGioHang.get(j).getLoaiThucPham()) && tp.getKhoiLuongTP() == listGioHang.get(j).getKhoiLuongTP()
                            && tp.getKhoiLuongIt() == listGioHang.get(j).getKhoiLuongIt() && tp.getGiaTienTP() == listGioHang.get(j).getGiaTienTP()
                            && tp.getGiaTriDD() == listGioHang.get(j).getGiaTriDD()) {

                        fail++;
                        sb.append(tp.getTenThucPham().toUpperCase(Locale.ITALY));
                    } else {
                        listGioHang.get(j).setKhoiLuongTP(tp.getKhoiLuongTP());
                        listGioHang.get(j).setKhoiLuongIt(tp.getKhoiLuongIt());
                        listGioHang.get(j).setLoaiThucPham(tp.getLoaiThucPham());
                        listGioHang.get(j).setGiaTienTP(tp.getGiaTienTP());
                        listGioHang.get(j).setGiaTriDD(tp.getGiaTriDD());
                        listGioHang.get(j).setDonGia(tp.getGiaTriDD() / tp.getGiaTienTP());
                        change++;
                        sbr.append(tp.getTenThucPham().toUpperCase(Locale.ITALY));
                    }
                    e++;
                }
            }
            if (i != list.size() - 1 && e == 1) {
                sb.append(", ");
            }
            if (e == 0) {
                listGioHang.add(tp);
                count++;
            }
        }

        loadTableGioHang();
        if (count != 0) {
            str.append("Có " + count + " thực phẩm được THÊM vào giỏ hàng thành công.");
        }
        if (change != 0) {
            str.append("Thực phẩm [ " + sbr + " ] đã được CẬP NHẬT vào trong giỏ hàng.");
        }
        if (sb.length() > 0) {
            if (str.length() > 0) {
                str.append("\n");
            }
            if (sb.substring(sb.length() - 2).equals(", ")) {
                sb.delete(sb.length() - 2, sb.length() - 1);
            }
            str.append("Có " + fail + " thực phẩm [ " + sb + " ] đã có trong giỏ hàng.");
        }
        MessageDialogHelper.showMessageDialog(this, str.toString(), "Thông báo");

    }

    public void loadData(String id) throws Exception {
        GioHangDao dao = new GioHangDao();
        GioHang gh = dao.findByID(id);
        if (gh != null) {
            txtSoTienMua.setText(valueOf(gh.getSoTienMua() * 1000));
            ArrayList<KetQua> list = new ArrayList<>();

            KetQuaDao daokq = new KetQuaDao();
            list = daokq.findAll();
            for (int i = 0; i < list.size(); i++) {
                if (list.get(i).getMaGioHang().equals(id)) {
                    ThucPham tp = new ThucPham();
                    tp.setMaThucPham(list.get(i).getMaThucPham());
                    tp.setTenThucPham(list.get(i).getTenThucPham());
                    tp.setKhoiLuongTP(list.get(i).getKhoiLuongTP());
                    tp.setKhoiLuongIt(list.get(i).getKhoiLuongIt());
                    tp.setLoaiThucPham(list.get(i).getLoaiThucPham());
                    tp.setGiaTienTP(list.get(i).getGiaTienTP());
                    tp.setGiaTriDD(list.get(i).getGiaTriDD());
                    tp.setDonGia(list.get(i).getGiaTriDD() / list.get(i).getGiaTienTP());
                    listGioHang.add(tp);
                }
            }
            loadTableGioHang();
        }
        giaiThuat(0);
        maGH = id;
        tenGH = gh.getTenGioHang();
    }

    public void loadData(ArrayList<ThucPham> listFood, String soTienMua) throws Exception {
        txtSoTienMua.setText(soTienMua);
        listGioHang.addAll(listFood);
        loadTableGioHang();
    }

    public void loadData(ArrayList<ThucPham> listFood, String soTienMua, StringBuilder sb, ArrayList<PhuongAn> listPhuongAn) throws Exception {
        MessageDialogHelper.showMessageDialog(this, sb.toString(), "Thông báo");

        String words[] = sb.toString().split("[ ]", 9);
        phuongAn.removeAll(phuongAn);
        phuongAn.addAll(listPhuongAn);
        txtSoTienMua.setText(soTienMua);
        listGioHang.addAll(listFood);
        ketQuaGH(lblSTConLai, 17, words[4], " VND");
        ketQuaGH(lblTKL, 17, words[5], " kg");
        ketQuaGH(lblTGDD, 25, words[6], " calo");
        txaGhiChu.setText(words[8]);
        loadTableGioHang();
        loadTableKetQua();
    }

    public void loadData(ArrayList<ThucPham> listFood) throws Exception {
        listGioHang.addAll(listFood);
        loadTableGioHang();
    }

    public boolean deleteList() {
        c = 0;
        int row[] = tblGioHang.getSelectedRows();
        for (int i = 0; i < row.length; i++) {
            String id = (String) tblGioHang.getValueAt(row[i], 1);
            for (int j = 0; j < listGioHang.size(); j++) {
                if (listGioHang.get(j).getMaThucPham().equals(id)) {
                    listGioHang.remove(j);
                }
            }
            c++;
        }
        if (c != 0) {
            loadTableGioHang();
            return true;
        } else {
            return false;
        }
    }

    public String createMa() throws Exception, NumberFormatException {
        GioHangDao dao = new GioHangDao();
        int i = 1;
        String ma = new String();
        ArrayList<GioHang> list = dao.findAll();
        if (list.size() == 0) {
            ma = "GH-001";
        }
        for (GioHang it : list) {
            if (list.size() == i) {
                String magh = it.getMaGioHang();
                int mamoi = Integer.parseInt(magh.substring(3)) + 1;
                ma = String.format("GH-%03d", mamoi);
            }
            i++;
        }
        return ma;
    }

    public void createPhuongAn() {
        for (int i = 0; i < listGioHang.size(); i++) {
            PhuongAn kq = new PhuongAn();
            kq.setMaThucPham(listGioHang.get(i).getMaThucPham());
            kq.setPhuongAn(0);
            phuongAn.add(kq);
        }
    }

    public void sort() {
        int n = listGioHang.size();
        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - i - 1; j++) {
                if (listGioHang.get(j).getDonGia() < listGioHang.get(j + 1).getDonGia()) {
                    ThucPham temp = listGioHang.get(j);
                    listGioHang.set(j, listGioHang.get(j + 1));
                    listGioHang.set(j + 1, temp);
                }
            }

        }
    }

    public void capNhatPA(int x[]) {
        if (giaLNTT < TGT) {
            giaLNTT = TGT;
            for (int i = 0; i < listGioHang.size(); i++) {
                phuongAn.get(i).setPhuongAn(x[i]);
            }
        }
    }

//    public float min(float a, float b) {
//        return a > b ? a : b;
//    }
//    public void nhanhCan(int i, int x[]) {
//        if (i >= 0 && i < listGioHang.size()) {
//            float khoiLuongMax = min(listGioHang.get(i).getKhoiLuongTP(), soTienCL / listGioHang.get(i).getGiaTienTP());
//            for (int j = khoiLuongMax; j >= 0; j++) {
//                TGT = TGT + j * listGioHang.get(i).getGiaTriDD();
//                soTienCL = soTienCL - j * listGioHang.get(i).getGiaTienTP();
//                if (i + 1 < listGioHang.size()) {
//                    canTren = (float) (TGT + soTienCL * listGioHang.get(i + 1).getDonGia());
//                }
//                if (canTren > giaLNTT) {
//                    x[i] = j;
//                    if ((i == listGioHang.size() - 1) || (soTienCL == 0)) {
//                        capNhatPA(x);
//                    } else {
//
//                        nhanhCan(i + 1, x);
//                    }
//                }
//                x[i] = 0;
//                TGT = TGT - j * listGioHang.get(i).getGiaTriDD();
//                soTienCL = soTienCL + j * listGioHang.get(i).getGiaTienTP();
//            }
//        }
//        return;
//
//    }
    public float min(float a, float b) {
        return a < b ? a : b;
    }

    public void thamAn() {
        int min;
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < listGioHang.size(); i++) {
            float pa, khoiLuongA = ((float) soTienMua / (float) (listGioHang.get(i).getGiaTienTP() * 1000));
            pa = min(khoiLuongA, listGioHang.get(i).getKhoiLuongTP());
            phuongAn.get(i).setPhuongAn(((int) (pa / listGioHang.get(i).getKhoiLuongIt())) * listGioHang.get(i).getKhoiLuongIt());
            soTienMua = soTienMua - (long) (phuongAn.get(i).getPhuongAn() * ((float) listGioHang.get(i).getGiaTienTP() * 1000));
        }
    }

    public void giaiThuat(int a) {
        if (testData()) {
            return;
        }
        phuongAn.removeAll(phuongAn);
        ketQuaGH(lblSTConLai, 17, "", " VND");
        ketQuaGH(lblTKL, 17, "", " kg");
        ketQuaGH(lblTGDD, 25, "", " calo");
        sort();
        createPhuongAn();
//        TGT = 0;
//        soTienCL = Integer.parseInt(txtSoTienMua.getText());
        soTienMua = Long.parseLong(txtSoTienMua.getText());
//        canTren = soTienCL * listGioHang.get(0).getDonGia();
//        giaLNTT = 0;
//        int[] x = new int[100];
//        nhanhCan(0, x);
        tienMua = soTienMua;
        thamAn();
        tongKhoiLuong = 0;
        tongGTDD = 0;
        for (int i = 0; i < listGioHang.size(); i++) {
            tongKhoiLuong = tongKhoiLuong + phuongAn.get(i).getPhuongAn();
            tongGTDD = tongGTDD + listGioHang.get(i).getGiaTriDD() * 10 * phuongAn.get(i).getPhuongAn();
        }
        if (a == 1) {
            MessageDialogHelper.showMessageDialog(this, "KẾT QUẢ của giỏ hàng đã được tìm thấy.", "Thông báo");
        }
        ketQuaGH(lblSTConLai, 17, valueOf(soTienMua), " VND");
        ketQuaGH(lblTKL, 17, valueOf(tongKhoiLuong), " kg");
        ketQuaGH(lblTGDD, 25, valueOf((int) tongGTDD), " calo");
        loadTableKetQua();

    }

    private boolean testData() throws NumberFormatException {
        StringBuilder sb = new StringBuilder();
        DataValidator.validateEmpty(txtSoTienMua, sb, "Bạn chưa nhập vào số tiền cần mua!\n");
        if (listGioHang.size() == 0) {
            sb.append("Bạn chưa chọn đồ dùng nào vào giỏ hàng!\n");

        }
        if (listGioHang.size() == 1) {
            sb.append("Số lượng thực phẩm được thêm vào phải nhiều hơn 1 thực phẩm.\n");
        }
        if (Integer.parseInt(txtSoTienMua.getText()) <= 1000 && !txtSoTienMua.getText().equals(null)) {
            sb.append("Số tiền cần mua phải lớn hơn 1000 VND.\n");
        }
        if (sb.length() > 0) {
            MessageDialogHelper.showErrorDialog(this, sb.toString(), "Lỗi");
            return true;
        }
        return false;
    }

    private void ketQuaGH(JLabel lb, int a, String giaTri, String donVi) {
        String str = lb.getText().substring(0, a);
        lb.setText(str + giaTri + donVi);
    }

    public String createTenGH() throws Exception {
        int count = 1;
        GioHangDao dao = new GioHangDao();
        ArrayList<GioHang> list = dao.findAll();
        if (list.size() != 0) {
            count = Integer.parseInt(list.get(list.size() - 1).getMaGioHang().substring(3)) + 1;
        }
        return "Giỏ hàng " + count;
    }

    public void luuKetQua() throws Exception {
        try {
            KetQuaDao daokq = new KetQuaDao();
            GioHangDao dao = new GioHangDao();
            ArrayList<KetQua> listKQ = daokq.findAll();
            ArrayList<GioHang> listGH = dao.findAll();
            if (maGH.equals("")) {
                GioHang gh = new GioHang();
                gh.setMaGioHang(createMa());
                maGH = gh.getMaGioHang();
                gh.setTenGioHang(createTenGH());
                tenGH = gh.getTenGioHang();
                gh.setSoTienMua(((int) tienMua) / 1000);
                gh.setSoTienCL((float) soTienMua / 1000);
                gh.setGiaTriDD((int) tongGTDD);
                gh.setSoThucPham(listGioHang.size());
                Date date = new Date();
                SimpleDateFormat dateformat = new SimpleDateFormat("dd/MM/yyyy");
                gh.setNgayTao(dateformat.format(date));
                if (txaGhiChu.getText().equals("")) {
                    gh.setGhiChu("(không có)");
                } else {
                    gh.setGhiChu(txaGhiChu.getText());
                }
                ArrayList<KetQua> list = new ArrayList<>();
                for (int i = 0; i < listGioHang.size(); i++) {
                    KetQua kq = new KetQua();
                    kq.setMaThucPham(listGioHang.get(i).getMaThucPham());
                    kq.setMaGioHang(gh.getMaGioHang());
                    kq.setTenThucPham(listGioHang.get(i).getTenThucPham());
                    kq.setKhoiLuongTP(listGioHang.get(i).getKhoiLuongTP());
                    kq.setKhoiLuongIt(listGioHang.get(i).getKhoiLuongIt());
                    kq.setLoaiThucPham(listGioHang.get(i).getLoaiThucPham());
                    kq.setGiaTienTP(listGioHang.get(i).getGiaTienTP());
                    kq.setGiaTriDD(listGioHang.get(i).getGiaTriDD());
                    kq.setPhuongAn(phuongAn.get(i).getPhuongAn());
                    list.add(kq);
                }
                for (GioHang it : listGH) {
                    if (it.equalsTest(gh)) {
                        int i = 0, a = 0;
                        for (KetQua is : listKQ) {
                            if (is.getMaGioHang().equals(it.getMaGioHang())) {
                                for (KetQua ik : list) {
                                    if (ik.equalsTest(is)) {
                                        i++;
                                    }
                                }
                            }

                        }
                        if (i == list.size()) {
                            if (MessageDialogHelper.showConfirmDialog(this, "Các thực phẩm cho giỏ hàng này đã có trong "
                                    + it.getTenGioHang().toUpperCase()
                                    + ".\nBạn có muốn THAY THẾ nó hay không hay không?",
                                    "Câu hỏi") == JOptionPane.YES_OPTION) {
                                int b = 0, c = 0;
                                if (dao.insert(gh)) {
                                    for (KetQua iu : list) {
                                        if (daokq.insert(iu)) {
                                            a++;
                                        }
                                    }
                                    if (daokq.deleteGioHang(it.getMaGioHang())) {
                                        b++;
                                    }
                                    if (dao.delete(it.getMaGioHang())) {
                                        c++;
                                    }
                                    if (a == list.size() && b != 0 && c != 0) {
                                        MessageDialogHelper.showMessageDialog(this, "Giỏ hàng đã được THAY THẾ thành công.", "Thông báo");
                                        saveFile(maGH, tenGH);
                                        return;
                                    }
                                }
                            } else {
                                return;
                            }
                        }
                    }
                }
                int a = 0;
                if (dao.insert(gh)) {
                    for (KetQua iu : list) {
                        if (daokq.insert(iu)) {
                            a++;
                        }
                    }
                    if (a == list.size()) {
                        MessageDialogHelper.showMessageDialog(this, gh.getTenGioHang().toUpperCase() + " được lưu thành công.", "Thông báo");
                        saveFile(maGH, tenGH);
                        return;
                    }
                }

            } else {
                ArrayList<KetQua> list = new ArrayList<>();
                int sus = 0;
                list = daokq.findAll();
                for (int i = 0; i < list.size(); i++) {
                    if (list.get(i).getMaGioHang().equals(maGH)) {
                        int a = 0;
                        for (int j = 0; j < listGioHang.size(); j++) {
                            if (list.get(i).getMaThucPham().equals(listGioHang.get(j).getMaThucPham())) {
                                a++;
                            }
                        }
                        if (a == 0) {
                            if (daokq.deleteThucPham(list.get(i).getMaThucPham())) {
                                sus++;
                            }
                        }
                    }
                }

                for (int i = 0; i < listGioHang.size(); i++) {
                    KetQua kq = new KetQua();
                    kq.setMaThucPham(listGioHang.get(i).getMaThucPham());
                    kq.setMaGioHang(maGH);
                    kq.setTenThucPham(listGioHang.get(i).getTenThucPham());
                    kq.setKhoiLuongTP(listGioHang.get(i).getKhoiLuongTP());
                    kq.setKhoiLuongIt(listGioHang.get(i).getKhoiLuongIt());
                    kq.setLoaiThucPham(listGioHang.get(i).getLoaiThucPham());
                    kq.setGiaTienTP(listGioHang.get(i).getGiaTienTP());
                    kq.setGiaTriDD(listGioHang.get(i).getGiaTriDD());
                    kq.setPhuongAn(phuongAn.get(i).getPhuongAn());
                    KetQua kqT = daokq.findByID(maGH, kq.getMaThucPham());
                    if (kqT == null) {
                        if (daokq.insert(kq)) {
                            sus++;
                        }
                    } else {
                        if (!kqT.equals(kq)) {
                            if (daokq.update(kq)) {
                                sus++;
                            }
                        }
                    }

                }
                if (sus != 0) {
                    sus = 0;
                    GioHang gh = new GioHang();
                    gh.setMaGioHang(maGH);
                    gh.setTenGioHang(tenGH);
                    gh.setSoTienMua(((int) tienMua) / 1000);
                    gh.setSoTienCL((float) soTienMua / 1000);
                    gh.setGiaTriDD((int) tongGTDD);
                    gh.setSoThucPham(listGioHang.size());
                    Date date = new Date();
                    SimpleDateFormat dateformat = new SimpleDateFormat("dd/MM/yyyy");
                    gh.setNgayTao(dateformat.format(date));
                    if (txaGhiChu.getText().equals("")) {
                        gh.setGhiChu("(không có)");
                    } else {
                        gh.setGhiChu(txaGhiChu.getText());
                    }
                    GioHang ghT = dao.findByID(maGH);
                    if (!ghT.equals(gh)) {
                        if (dao.update(gh)) {
                            sus++;
                        }
                    }
                }
                if (sus != 0) {
                    MessageDialogHelper.showMessageDialog(this, tenGH.toUpperCase() + " đã cập nhật thành công.", "Thông báo");

                } else {
                    MessageDialogHelper.showMessageDialog(this, tenGH.toUpperCase() + " đã lưu trước đó rồi.\nBạn hãy lưu giỏ hàng khác.", "Thông báo");
                }
            }
            saveFile(maGH, tenGH);
        } catch (Exception e) {
            MessageDialogHelper.showMessageDialog(this, e.getMessage(), "Thông báo");
        }
    }

    public void saveFile(String id, String ten) {
        if (MessageDialogHelper.showConfirmDialog(this, "Bạn có muốn LƯU [ " + tenGH + " ]  dưới dạng FILE hay không?",
                "Câu hỏi") == JOptionPane.YES_OPTION) {
            XFile file = new XFile();
            if (file.writeFile(parent, id)) {
                MessageDialogHelper.showMessageDialog(this, ten.toUpperCase() + " đã được LƯU thành FILE thành công.", "Thông báo");
            }
        }
    }

    public String getMaGH() {
        return maGH;
    }

    public void setMaGH(String maGH) {
        this.maGH = maGH;
    }

    public String getTenGH() {
        return tenGH;
    }

    public void setTenGH(String tenGH) {
        this.tenGH = tenGH;
    }

    public int getTblKetQua() {
        return tblKetQua.getRowCount();
    }

    public void setTblKetQua(JTable tblKetQua) {
        this.tblKetQua = tblKetQua;
    }

    public JTextField getTxtSoTienMua() {
        return txtSoTienMua;
    }

    public void setTxtSoTienMua(JTextField txtSoTienMua) {
        this.txtSoTienMua = txtSoTienMua;
    }

    public ArrayList<ThucPham> getListGioHang() {
        return listGioHang;
    }

    public void setListGioHang(ArrayList<ThucPham> listGioHang) {
        this.listGioHang = listGioHang;
    }

    public void loadTableGioHang() {
        table.loadDataToTableGioHang(this, listGioHang);
        table.tableModel(tblGioHang);
    }

    public void loadTableKetQua() {
        table.loadDataToTableKetQua(this, listGioHang, phuongAn);
        table.tableModelKQ(tblKetQua);
    }

    public void setTxaGhiChu(String txaGhiChu) {
        this.txaGhiChu.setText(txaGhiChu);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblSTConLai;
    private javax.swing.JLabel lblTGDD;
    private javax.swing.JLabel lblTKL;
    private javax.swing.JTable tblGioHang;
    private javax.swing.JTable tblKetQua;
    private javax.swing.JTextPane txaGhiChu;
    private javax.swing.JTextField txtSoTienMua;
    // End of variables declaration//GEN-END:variables
}
