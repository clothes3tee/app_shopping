/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package viewForm;

import dao.ThucPhamDao;
import helper.DataValidator;
import helper.MessageDialogHelper;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import static java.lang.String.valueOf;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import static javax.swing.BorderFactory.createLineBorder;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import helper.Bang;
import model.ThucPham;
import helper.XFile;
import static viewForm.FrmMain.back;
import static viewForm.FrmMain.listIndex;
import static viewForm.FrmMain.listPanel;
import static viewForm.FrmMain.pnlMain;
import static viewForm.FrmMain.now;
import static viewForm.FrmMain.indexList;

/**
 *
 * @author Admin
 */
public class PaneAddFood extends javax.swing.JPanel {
    
    FrmMain main;
    private Bang table = new Bang();

    /**
     * Creates new form PaneAddFood
     */
    public PaneAddFood() {
        initComponents();
        setSize(1015, 750);
        table.initTable(tblThucPham);
        loadTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btgLoaiTP = new javax.swing.ButtonGroup();
        jToolBar1 = new javax.swing.JToolBar();
        jSeparator4 = new javax.swing.JToolBar.Separator();
        jButton2 = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        btnAddFile = new javax.swing.JButton();
        jSeparator7 = new javax.swing.JToolBar.Separator();
        btnReturn = new javax.swing.JButton();
        jSeparator11 = new javax.swing.JToolBar.Separator();
        btnLuu = new javax.swing.JButton();
        btnCapNhat = new javax.swing.JButton();
        btnXoa = new javax.swing.JButton();
        jSeparator5 = new javax.swing.JToolBar.Separator();
        btnLamMoiTP = new javax.swing.JButton();
        jSeparator8 = new javax.swing.JToolBar.Separator();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        lblMaThucPham = new javax.swing.JLabel();
        txtTenThucPham = new javax.swing.JTextField();
        txtGTDD = new javax.swing.JTextField();
        spnKhoiLuong = new javax.swing.JSpinner();
        jSeparator9 = new javax.swing.JSeparator();
        jSeparator10 = new javax.swing.JSeparator();
        jLabel14 = new javax.swing.JLabel();
        pnlLoaiTP = new javax.swing.JPanel();
        rdbRauCu = new javax.swing.JRadioButton();
        rdbHat = new javax.swing.JRadioButton();
        rdbThitCa = new javax.swing.JRadioButton();
        txtGiaTien = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        cbxDonVi1 = new javax.swing.JComboBox<>();
        cbxDonVi2 = new javax.swing.JComboBox<>();
        spnKhoiLuongIt = new javax.swing.JSpinner();
        jPanel2 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblThucPham = new javax.swing.JTable();
        btnAllFood = new javax.swing.JButton();

        jToolBar1.setBackground(new java.awt.Color(164, 206, 164));
        jToolBar1.setRollover(true);
        jToolBar1.add(jSeparator4);

        jButton2.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        jButton2.setForeground(new java.awt.Color(135, 32, 32));
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Button-Blue-Arrow-Left-icon.png"))); // NOI18N
        jButton2.setText("Trang Trước");
        jButton2.setFocusable(false);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton2);

        btnNext.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        btnNext.setForeground(new java.awt.Color(135, 32, 32));
        btnNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Button-Green-Arrow-Left-icon.png"))); // NOI18N
        btnNext.setText("Trang Sau");
        btnNext.setFocusable(false);
        btnNext.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnNext.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnNext.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnNextMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnNextMouseExited(evt);
            }
        });
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });
        jToolBar1.add(btnNext);
        jToolBar1.add(jSeparator1);

        btnAddFile.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        btnAddFile.setForeground(new java.awt.Color(135, 32, 32));
        btnAddFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/listcart-icon.png"))); // NOI18N
        btnAddFile.setText("Thêm Từ File");
        btnAddFile.setFocusable(false);
        btnAddFile.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAddFile.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAddFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddFileActionPerformed(evt);
            }
        });
        jToolBar1.add(btnAddFile);
        jToolBar1.add(jSeparator7);

        btnReturn.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        btnReturn.setForeground(new java.awt.Color(135, 32, 32));
        btnReturn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Arrow-refresh-icon.png"))); // NOI18N
        btnReturn.setText("Tải Lại");
        btnReturn.setFocusable(false);
        btnReturn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnReturn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnReturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReturnActionPerformed(evt);
            }
        });
        jToolBar1.add(btnReturn);
        jToolBar1.add(jSeparator11);

        btnLuu.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        btnLuu.setForeground(new java.awt.Color(135, 32, 32));
        btnLuu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/savefood-icon.png"))); // NOI18N
        btnLuu.setText("Lưu ");
        btnLuu.setFocusable(false);
        btnLuu.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnLuu.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnLuu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLuuActionPerformed(evt);
            }
        });
        jToolBar1.add(btnLuu);

        btnCapNhat.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        btnCapNhat.setForeground(new java.awt.Color(135, 32, 32));
        btnCapNhat.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/editfood-icon.png"))); // NOI18N
        btnCapNhat.setText("Cập nhật");
        btnCapNhat.setFocusable(false);
        btnCapNhat.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCapNhat.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnCapNhat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCapNhatActionPerformed(evt);
            }
        });
        jToolBar1.add(btnCapNhat);

        btnXoa.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        btnXoa.setForeground(new java.awt.Color(135, 32, 32));
        btnXoa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/removefood-icon.png"))); // NOI18N
        btnXoa.setText("Xóa");
        btnXoa.setFocusable(false);
        btnXoa.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnXoa.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaActionPerformed(evt);
            }
        });
        jToolBar1.add(btnXoa);
        jToolBar1.add(jSeparator5);

        btnLamMoiTP.setForeground(new java.awt.Color(135, 32, 32));
        btnLamMoiTP.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/removeallfood-icon.png"))); // NOI18N
        btnLamMoiTP.setText("Làm Mới");
        btnLamMoiTP.setFocusable(false);
        btnLamMoiTP.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnLamMoiTP.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnLamMoiTP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLamMoiTPActionPerformed(evt);
            }
        });
        jToolBar1.add(btnLamMoiTP);
        jToolBar1.add(jSeparator8);

        jPanel1.setBackground(new java.awt.Color(230, 236, 230));

        jLabel1.setFont(new java.awt.Font("Courier New", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 153, 0));
        jLabel1.setText("Thông tin thực phẩm");

        jLabel2.setFont(new java.awt.Font("Arial", 1, 15)); // NOI18N
        jLabel2.setText("Mã thực phẩm:");

        jLabel3.setFont(new java.awt.Font("Arial", 1, 15)); // NOI18N
        jLabel3.setText("Tên thực phẩm :");

        jLabel4.setFont(new java.awt.Font("Arial", 1, 15)); // NOI18N
        jLabel4.setText("Khối lượng cần mua : ");

        jLabel5.setFont(new java.awt.Font("Arial", 1, 15)); // NOI18N
        jLabel5.setText("Giá trị dinh dưỡng (calo/100g) :");

        jLabel6.setFont(new java.awt.Font("Arial", 1, 15)); // NOI18N
        jLabel6.setText("Giá tiền cho mỗi 1kg (VND) :");

        lblMaThucPham.setFont(new java.awt.Font("Arial", 1, 15)); // NOI18N
        lblMaThucPham.setText("TP-");

        txtTenThucPham.setFont(new java.awt.Font("Arial", 3, 15)); // NOI18N
        txtTenThucPham.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtTenThucPhamKeyPressed(evt);
            }
        });

        txtGTDD.setFont(new java.awt.Font("Arial", 3, 15)); // NOI18N

        spnKhoiLuong.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        spnKhoiLuong.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                spnKhoiLuongKeyPressed(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Arial", 1, 15)); // NOI18N
        jLabel14.setText("Loại thực phẩm : ");

        pnlLoaiTP.setBackground(new java.awt.Color(230, 236, 230));

        btgLoaiTP.add(rdbRauCu);
        rdbRauCu.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        rdbRauCu.setText("Rau củ");
        rdbRauCu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbRauCuActionPerformed(evt);
            }
        });

        btgLoaiTP.add(rdbHat);
        rdbHat.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        rdbHat.setText("Các loại hạt");

        btgLoaiTP.add(rdbThitCa);
        rdbThitCa.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        rdbThitCa.setText("Thịt cá");
        rdbThitCa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbThitCaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlLoaiTPLayout = new javax.swing.GroupLayout(pnlLoaiTP);
        pnlLoaiTP.setLayout(pnlLoaiTPLayout);
        pnlLoaiTPLayout.setHorizontalGroup(
            pnlLoaiTPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlLoaiTPLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rdbRauCu)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 61, Short.MAX_VALUE)
                .addComponent(rdbThitCa)
                .addGap(47, 47, 47)
                .addComponent(rdbHat))
        );
        pnlLoaiTPLayout.setVerticalGroup(
            pnlLoaiTPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLoaiTPLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlLoaiTPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdbHat)
                    .addComponent(rdbRauCu)
                    .addComponent(rdbThitCa))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        txtGiaTien.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N

        jLabel7.setFont(new java.awt.Font("Arial", 1, 15)); // NOI18N
        jLabel7.setText("Khối lượng cho 1 lần mua : ");

        cbxDonVi1.setFont(new java.awt.Font("Arial", 1, 15)); // NOI18N
        cbxDonVi1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Đơn vị", "kg", "g" }));

        cbxDonVi2.setFont(new java.awt.Font("Arial", 1, 15)); // NOI18N
        cbxDonVi2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Đơn vị", "kg", "g" }));

        spnKhoiLuongIt.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        spnKhoiLuongIt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                spnKhoiLuongItKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(54, 54, 54)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(110, 110, 110)
                                        .addComponent(jLabel6))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(113, 113, 113)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel4)
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel7))))
                                .addGap(31, 31, 31)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lblMaThucPham, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtGiaTien, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(spnKhoiLuong, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(spnKhoiLuongIt, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(cbxDonVi1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(cbxDonVi2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 150, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtTenThucPham, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel14)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(pnlLoaiTP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                                .addComponent(txtGTDD, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(24, 24, 24)))
                        .addGap(61, 61, 61))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jSeparator9, javax.swing.GroupLayout.DEFAULT_SIZE, 1372, Short.MAX_VALUE)
                            .addComponent(jSeparator10))))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jSeparator9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(lblMaThucPham, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(txtTenThucPham, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 48, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(spnKhoiLuong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14)
                            .addComponent(cbxDonVi1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 33, Short.MAX_VALUE)
                        .addComponent(pnlLoaiTP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel5)
                    .addComponent(txtGTDD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxDonVi2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spnKhoiLuongIt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtGiaTien, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addComponent(jSeparator10, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
        );

        jPanel2.setBackground(new java.awt.Color(247, 247, 241));

        jLabel13.setFont(new java.awt.Font("Courier New", 1, 18)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(0, 102, 102));
        jLabel13.setText("Danh sách thực phẩm");

        tblThucPham.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "STT", "Mã thực phẩm", "Tên thực phẩm", "Loại thực phẩm", "Khối lượng (g)", "Giá trị dinh dưỡng (calo/100g) ", "Giá tiền cho mỗi 1Kg (VND)", ""
            }
        ));
        tblThucPham.setShowGrid(true);
        tblThucPham.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblThucPhamMouseClicked(evt);
            }
        });
        tblThucPham.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblThucPhamKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(tblThucPham);
        if (tblThucPham.getColumnModel().getColumnCount() > 0) {
            tblThucPham.getColumnModel().getColumn(0).setPreferredWidth(5);
            tblThucPham.getColumnModel().getColumn(1).setPreferredWidth(30);
            tblThucPham.getColumnModel().getColumn(2).setPreferredWidth(50);
        }

        btnAllFood.setForeground(new java.awt.Color(51, 0, 204));
        btnAllFood.setText("Xem tất cả");
        btnAllFood.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAllFoodActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1342, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(59, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAllFood, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(92, 92, 92))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(btnAllFood))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(42, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    public void loadTable() {
        table.loadDataToTable(this);
        table.tableModel(tblThucPham);
    }
    
    public String selectedTypeFood() {
        String loaiThucPham = new String("");
        if (rdbRauCu.isSelected()) {
            loaiThucPham = rdbRauCu.getText();
        }
        if (rdbThitCa.isSelected()) {
            loaiThucPham = rdbThitCa.getText();
        }
        if (rdbHat.isSelected()) {
            loaiThucPham = rdbHat.getText();
        }
        return loaiThucPham;
    }

    private void btnXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaActionPerformed
        try {
            ThucPham tp = new ThucPham();
            ThucPhamDao dao = new ThucPhamDao();
            
            int row[] = tblThucPham.getSelectedRows();
            if (row.length == 0 || lblMaThucPham.getText().equals("TP-")) {
                MessageDialogHelper.showMessageDialog(this, "Bạn chưa CHỌN thực phẩm.", "Thông báo");
                return;
            }
            if (MessageDialogHelper.showConfirmDialog(this, "Bạn có muốn xóa" + row.length + " thực phẩm này hay không?", "Câu hỏi") == JOptionPane.YES_OPTION) {
                
                if (row.length != 0) {
                    
                    StringBuilder sb = new StringBuilder();
                    int sus = 0, fail = 0;
                    
                    for (int i = 0; i < row.length; i++) {
                        String id = (String) tblThucPham.getValueAt(row[i], 1);
                        if (dao.delete(id)) {
                            sus++;
                        } else {
                            fail++;
                        }
                    }
                    if (sus != 0) {
                        sb.append(sus + " thực phẩm đã được XÓA thành công.");
                    }
                    if (fail != 0) {
                        sb.append(fail + " thực phẩm không được XÓA!");
                    }
                    loadTable();
                    lamMoi();
                    MessageDialogHelper.showMessageDialog(this, sb.toString(), "Thông báo");
                    
                } else {
                    if (dao.findByID(lblMaThucPham.getText()) == null) {
                        MessageDialogHelper.showWarningDialog(this, "Bạn không thể XÓA " + row.length + " bởi vì thực phẩm\n" + " không có trong danh sách.\n" + "", "Cảnh báo");
                        return;
                    }
                    if (dao.delete(lblMaThucPham.getText())) {
                        MessageDialogHelper.showMessageDialog(this, row.length + " thực phẩm đã được XÓA thành công.", "Thông báo");
                        loadTable();
                        lamMoi();
                    } else {
                        MessageDialogHelper.showMessageDialog(this, row.length + " thực phẩm không được XÓA!", "Thông báo");
                    }
                    loadTable();
                }
            } else {
                return;
            }
        } catch (Exception e) {
            e.printStackTrace();
            MessageDialogHelper.showErrorDialog(this, e.getMessage(), "Lỗi");
        }
    }//GEN-LAST:event_btnXoaActionPerformed

    private void btnLuuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLuuActionPerformed
        StringBuilder sb = new StringBuilder();
        StringBuilder str = new StringBuilder();
        DataValidator.validateEmpty(txtTenThucPham, sb, "\t- Tên thực phẩm!");
        DataValidator.validateEmpty(spnKhoiLuong, sb, "\t- Khối lượng cần mua!");
        DataValidator.validateEmpty(cbxDonVi1, sb, "\t- Đơn vị khối lượng mua!");
        DataValidator.validateEmpty(cbxDonVi2, sb, "\t- Đơn vị khối lượng mua!");
        DataValidator.validateEmpty(txtGiaTien, sb, "\t- Giá tiền cho mỗi 100g thực phẩm!");
        if (selectedTypeFood().equals("")) {
            sb.append("\t- Loại thực phẩm!").append("\n");
            pnlLoaiTP.setBackground(new java.awt.Color(255, 255, 0));
            pnlLoaiTP.requestFocus();
        } else {
            pnlLoaiTP.setBackground(new java.awt.Color(230, 236, 230));
        }
        DataValidator.validateEmpty(txtGTDD, sb, "\t- Giá trị dinh dưỡng cho 100g!");
        if (Integer.parseInt(txtGiaTien.getText()) < 1000 && !txtGiaTien.getText().equals("")) {
            DataValidator.isNumberic(txtGiaTien, str, "\t- Giá tiền phải nhập số và có giá trị > 1000 VND.");
        }
        if (!txtGTDD.getText().equals("")) {
            DataValidator.isNumberic(txtGTDD, str, "\t- Giá trị dinh dưỡng phải nhập số.");
        }
        if (sb.length() > 0) {
            MessageDialogHelper.showErrorDialog(this, "Bạn chưa NHẬP vào đầy đủ (hoặc không đúng) thông tin của thực phẩm:\n" + sb.toString() + str.toString(), "Lỗi");
            return;
        }
        
        try {
            ThucPham tp = new ThucPham();
            tp.setMaThucPham(createMa());
            tp.setTenThucPham(table.firstUpcase(txtTenThucPham.getText()));
            if (cbxDonVi1.getSelectedIndex() == 1) {
                tp.setKhoiLuongTP((float) ((int) spnKhoiLuong.getValue()));
            } else {
                tp.setKhoiLuongTP((float) ((int) spnKhoiLuong.getValue()) / 1000);
            }
            if (cbxDonVi2.getSelectedIndex() == 1) {
                tp.setKhoiLuongIt((float) ((int) spnKhoiLuongIt.getValue()));
            } else {
                tp.setKhoiLuongIt((float) ((int) spnKhoiLuongIt.getValue()) / 1000);
            }
            tp.setLoaiThucPham(selectedTypeFood());
            int giaTien = (int) (Long.parseLong(txtGiaTien.getText()) / 1000);
            tp.setGiaTienTP(giaTien);
            tp.setGiaTriDD(Integer.parseInt(txtGTDD.getText()));
            tp.setDonGia((float) tp.getGiaTriDD() / (float) tp.getGiaTienTP());
            
            ThucPhamDao dao = new ThucPhamDao();
            if (dao.findByID(lblMaThucPham.getText()) != null) {
                MessageDialogHelper.showWarningDialog(this, "Thực phẩm này đã được LƯU trong danh sách!\n Bạn hãy nhập thực phẩm khác.", "Cảnh báo");
                return;
            }
            ThucPham tpT = dao.findByName(tp.getTenThucPham());
            if(tpT != null){
                if (MessageDialogHelper.showConfirmDialog(this, "Thực phẩm này đã có trong danh sách.\n Bạn có muốn CẬP NHẬT lại hay không?", "Câu hỏi") == JOptionPane.YES_OPTION){
                    tp.setMaThucPham(tpT.getMaThucPham());
                    dao.update(tp);
                }
            }else{
            if (dao.insert(tp)) {
                MessageDialogHelper.showMessageDialog(this, "Thực phẩm đã được LƯU thành công.", "Thông báo");
                loadTable();
                lamMoi();
            } else {
                MessageDialogHelper.showMessageDialog(this, "Thực phẩm không được LƯU!", "Thông báo");
            }}
        } catch (Exception e) {
            e.printStackTrace();
            MessageDialogHelper.showErrorDialog(this, "Đã xảy ra lôi khi LƯU thực phẩm!\nBạn hãy thử lưu lại.", "Lỗi");
        }
    }//GEN-LAST:event_btnLuuActionPerformed
    
    public String createMa() throws Exception, NumberFormatException {
        ThucPhamDao dao = new ThucPhamDao();
        int i = 1;
        String ma = new String();
        ArrayList<ThucPham> list = dao.findAll();
        if (list.size() == 0) {
            ma = "TP-001";
        }
        for (ThucPham it : list) {
            if (list.size() == i) {
                String matp = it.getMaThucPham();
                int mamoi = Integer.parseInt(matp.substring(3)) + 1;
                ma = String.format("TP-%03d", mamoi);
            }
            i++;
        }
        return ma;
    }

    private void btnLamMoiTPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLamMoiTPActionPerformed
        lamMoi();
    }//GEN-LAST:event_btnLamMoiTPActionPerformed
    
    public void lamMoi() {
        lblMaThucPham.setText("TP-");
        txtTenThucPham.setText("");
        spnKhoiLuong.setValue(0);
        spnKhoiLuongIt.setValue(0);
        cbxDonVi1.setSelectedIndex(0);
        cbxDonVi2.setSelectedIndex(0);
        txtGiaTien.setText("");
        btgLoaiTP.clearSelection();
        txtGTDD.setText("");
    }

    private void btnAllFoodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAllFoodActionPerformed
        int a = 3;
        pnlMain.removeAll();
        pnlMain.add(listPanel.get(a));
        pnlMain.updateUI();
        if (a == 1) {
            indexList = 0;
            listIndex.removeAll(listIndex);
            listIndex.add(valueOf(a));
        } else {
            if (Integer.parseInt(listIndex.get(listIndex.size() - 1)) != a) {
                listIndex.add(valueOf(a));
                indexList = listIndex.size() - 1;
            }
        }
        now = a;
    }//GEN-LAST:event_btnAllFoodActionPerformed
    
    private void update() {
        spnKhoiLuong.updateUI();
        spnKhoiLuongIt.updateUI();
        String str = spnKhoiLuong.getValue() + " " + spnKhoiLuongIt.getValue();
    }

    private void btnCapNhatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCapNhatActionPerformed
        update();
        StringBuilder sb = new StringBuilder();
        StringBuilder str = new StringBuilder();
        DataValidator.validateEmpty(txtTenThucPham, sb, "\t- Tên thực phẩm!");
        DataValidator.validateEmpty(spnKhoiLuong, sb, "\t- Khối lượng cần mua!");
        DataValidator.validateEmpty(cbxDonVi1, sb, "\t- Đơn vị khối lượng mua!");
        DataValidator.validateEmpty(cbxDonVi2, sb, "\t- Đơn vị khối lượng mua!");
        DataValidator.validateEmpty(txtGiaTien, sb, "\t- Giá tiền cho mỗi 100g thực phẩm!");
        if (selectedTypeFood().equals("")) {
            sb.append("\t- Loại thực phẩm!").append("\n");
            pnlLoaiTP.setBackground(new java.awt.Color(255, 255, 0));
            pnlLoaiTP.requestFocus();
        } else {
            pnlLoaiTP.setBackground(new java.awt.Color(230, 236, 230));
        }
        DataValidator.validateEmpty(txtGTDD, sb, "\t- Giá trị dinh dưỡng cho 100g!");
        if (Integer.parseInt(txtGiaTien.getText()) < 1000 && !txtGiaTien.getText().equals("")) {
            DataValidator.isNumberic(txtGiaTien, str, "\t- Giá tiền phải nhập số và có giá trị > 1000 VND.");
        }
        if (txtGTDD.getText().equals("")) {
            DataValidator.isNumberic(txtGTDD, str, "\t- Giá trị dinh dưỡng phải nhập số.");
        }
        if (sb.length() > 0) {
            MessageDialogHelper.showErrorDialog(this, "Bạn chưa NHẬP vào đầy đủ (hoặc không đúng) thông tin của thực phẩm:\n" + sb.toString() + str.toString(), "Lỗi");
            return;
        }
        
        try {
            ThucPham tp = new ThucPham();
            ThucPhamDao dao = new ThucPhamDao();
            tp.setMaThucPham(lblMaThucPham.getText());
            tp.setTenThucPham(table.firstUpcase(txtTenThucPham.getText()));
            
            if (cbxDonVi1.getSelectedIndex() == 1) {
                tp.setKhoiLuongTP((float) ((int) spnKhoiLuong.getValue()));
            } else {
                tp.setKhoiLuongTP((float) ((int) spnKhoiLuong.getValue()) / 1000);
            }
            if (cbxDonVi2.getSelectedIndex() == 1) {
                tp.setKhoiLuongIt((float) ((int) spnKhoiLuongIt.getValue()));
            } else {
                tp.setKhoiLuongIt((float) ((int) spnKhoiLuongIt.getValue()) / 1000);
            }
            tp.setLoaiThucPham(selectedTypeFood());
            int giaTien = (int) (Long.parseLong(txtGiaTien.getText()) / 1000);
            tp.setGiaTienTP(giaTien);
            tp.setGiaTriDD(Integer.parseInt(txtGTDD.getText()));
            tp.setDonGia((float) tp.getGiaTriDD() / (float) tp.getGiaTienTP());
            
            if (dao.findByID(tp.getMaThucPham()) == null) {
                MessageDialogHelper.showWarningDialog(this, "Bạn không thể CẬP NHẬT bởi vì thực phẩm\n" + "này không có trong danh sách.\n" + "", "Cảnh báo");
                if (MessageDialogHelper.showConfirmDialog(this, "Để tiếp tục bạn có thể LƯU lại thực phẩm này?", "Câu hỏi") == JOptionPane.YES_OPTION) {
                    tp.setMaThucPham(createMa());
                    if (dao.insert(tp)) {
                        MessageDialogHelper.showMessageDialog(this, "Thực phẩm đã được LƯU thành công.", "Thông báo");
                        loadTable();
                        lamMoi();
                    } else {
                        MessageDialogHelper.showMessageDialog(this, "Thực phẩm không được LƯU!", "Thông báo");
                    }
                }
                return;
            }
            if (dao.update(tp)) {
                MessageDialogHelper.showMessageDialog(this, "Thực phẩm đã được CẬP NHẬT thành công.", "Thông báo");
                loadTable();
                lamMoi();
            } else {
                MessageDialogHelper.showMessageDialog(this, "Thực phẩm không được CẬP NHẬT!", "Thông báo");
            }
        } catch (Exception e) {
            e.printStackTrace();
            MessageDialogHelper.showErrorDialog(this, "Đã xảy ra lôi khi CẬP NHẬT thực phẩm!\nBạn hãy thử cập nhật lại.", "Lỗi");
        }

    }//GEN-LAST:event_btnCapNhatActionPerformed

    private void tblThucPhamMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblThucPhamMouseClicked
        try {
            int row = tblThucPham.getSelectedRow();
            if (row >= 0) {
                String id = (String) tblThucPham.getValueAt(row, 1);
                showThucPham(id);
                
            }
            
        } catch (Exception e) {
            e.printStackTrace();
            MessageDialogHelper.showErrorDialog(this, "Đã xảy ra lôi khi CHỌN thực phẩm!\nBạn hãy thử chọn lại.", "Lỗi");
        }
    }//GEN-LAST:event_tblThucPhamMouseClicked
    
    public void showThucPham(String id) throws Exception {
        ThucPhamDao dao = new ThucPhamDao();
        ThucPham tp = dao.findByID(id);
        
        if (tp != null) {
            lblMaThucPham.setText(tp.getMaThucPham());
            txtTenThucPham.setText(tp.getTenThucPham());
            rdbRauCu.setSelected(tp.getLoaiThucPham().equals(rdbRauCu.getText()) ? true : false);
            rdbThitCa.setSelected(tp.getLoaiThucPham().equals(rdbThitCa.getText()) ? true : false);
            rdbHat.setSelected(tp.getLoaiThucPham().equals(rdbHat.getText()) ? true : false);
            if (tp.getKhoiLuongTP() >= 1) {
                spnKhoiLuong.setValue((int) tp.getKhoiLuongTP());
                cbxDonVi1.setSelectedIndex(1);
            } else {
                spnKhoiLuong.setValue((int) tp.getKhoiLuongTP() * 1000);
                cbxDonVi1.setSelectedIndex(2);
            }
            if (tp.getKhoiLuongIt() >= 1) {
                spnKhoiLuongIt.setValue((int) tp.getKhoiLuongIt());
                cbxDonVi2.setSelectedIndex(1);
            } else {
                spnKhoiLuongIt.setValue((int) (tp.getKhoiLuongIt() * 1000));
                cbxDonVi2.setSelectedIndex(2);
            }
            txtGiaTien.setText(valueOf((int) (tp.getGiaTienTP() * 1000)));
            txtGTDD.setText(valueOf(tp.getGiaTriDD()));
        }
    }

    private void tblThucPhamKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblThucPhamKeyPressed
        if (KeyEvent.VK_DELETE == evt.getKeyCode()) {
            try {
                ThucPhamDao dao = new ThucPhamDao();
                
                int row[] = tblThucPham.getSelectedRows();
                if (MessageDialogHelper.showConfirmDialog(this, "Bạn có muốn XÓA " + row.length + " thực phẩm này hay không?", "Câu hỏi") == JOptionPane.YES_OPTION) {
                    
                    if (row.length != 0) {
                        
                        StringBuilder sb = new StringBuilder();
                        int sus = 0, fail = 0;
                        
                        for (int i = 0; i < row.length; i++) {
                            String id = (String) tblThucPham.getValueAt(row[i], 1);
                            if (dao.delete(id)) {
                                sus++;
                            } else {
                                fail++;
                            }
                        }
                        if (sus != 0) {
                            sb.append(sus + " thực phẩm đã được XÓA thành công.");
                        }
                        if (fail != 0) {
                            sb.append(fail + " thực phẩm không được XÓA!");
                        }
                        lamMoi();
                        loadTable();
                        MessageDialogHelper.showMessageDialog(this, sb.toString(), "Thông báo");
                        
                    }
                    return;
                }
            } catch (Exception e) {
                e.printStackTrace();
                MessageDialogHelper.showErrorDialog(this, "Đã xảy ra lôi khi XÓA thực phẩm!\nBạn hãy thử chọn lại.", "Lỗi");
            }
        }
    }//GEN-LAST:event_tblThucPhamKeyPressed

    private void btnReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReturnActionPerformed
        if (!lblMaThucPham.getText().equals("TP-"))
        try {
            showThucPham(lblMaThucPham.getText());
        } catch (Exception ex) {
            Logger.getLogger(PaneAddFood.class.getName()).log(Level.SEVERE, null, ex);
        }
        loadTable();
    }//GEN-LAST:event_btnReturnActionPerformed

    private void rdbThitCaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbThitCaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdbThitCaActionPerformed

    private void spnKhoiLuongKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_spnKhoiLuongKeyPressed

    }//GEN-LAST:event_spnKhoiLuongKeyPressed

    private void txtTenThucPhamKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTenThucPhamKeyPressed

    }//GEN-LAST:event_txtTenThucPhamKeyPressed

    private void spnKhoiLuongItKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_spnKhoiLuongItKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_spnKhoiLuongItKeyPressed
    

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        pnlMain.removeAll();
        int a = Integer.parseInt(listIndex.get(indexList - 1));
        if (a == 2 || a == 3 || a == 5) {
            if (a == 2) {
                PaneAddFood panel = (PaneAddFood) listPanel.get(a);
                panel.loadTable();
                pnlMain.add(panel);
            }
            if (a == 3) {
                PaneListFood panel = (PaneListFood) listPanel.get(a);
                panel.loadTable();
                pnlMain.add(panel);
            }
            if (a == 5) {
                PaneListCart panel = (PaneListCart) listPanel.get(a);
                panel.loadTable();
                pnlMain.add(panel);
            }
            
        } else {
            pnlMain.add(listPanel.get(a));
        }
        indexList--;
        if (Integer.parseInt(listIndex.get(indexList)) == 1) {
            listIndex.removeAll(listIndex);
            listIndex.add("1");
            indexList = 0;
        }
        pnlMain.updateUI();
        now = a;
    }//GEN-LAST:event_jButton2ActionPerformed

    private void btnNextMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnNextMouseEntered
        if (listIndex.size() == indexList + 1) {
            btnNext.setEnabled(false);
            btnNext.setToolTipText("Đây là trang cuối cùng!");
        }
    }//GEN-LAST:event_btnNextMouseEntered

    private void btnNextMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnNextMouseExited
        btnNext.setEnabled(true);
        btnNext.setToolTipText(null);
    }//GEN-LAST:event_btnNextMouseExited

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        if (listIndex.size() == indexList + 1) {
            return;
        }
        pnlMain.removeAll();
        int a = Integer.parseInt(listIndex.get(indexList + 1));
        if (a == 2 || a == 3 || a == 5) {
            if (a == 2) {
                PaneAddFood panel = (PaneAddFood) listPanel.get(a);
                panel.loadTable();
                pnlMain.add(panel);
            }
            if (a == 3) {
                PaneListFood panel = (PaneListFood) listPanel.get(a);
                panel.loadTable();
                pnlMain.add(panel);
            }
            if (a == 5) {
                PaneListCart panel = (PaneListCart) listPanel.get(a);
                panel.loadTable();
                pnlMain.add(panel);
            }
            
        } else {
            pnlMain.add(listPanel.get(a));
        }
        indexList++;
        pnlMain.updateUI();
        now = a;
    }//GEN-LAST:event_btnNextActionPerformed

    private void btnAddFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddFileActionPerformed
        final JFileChooser fileDialog = new JFileChooser();
        FileNameExtensionFilter file = new FileNameExtensionFilter("All files", "txt", "docx", "xlsx");
        fileDialog.setFileFilter(file);
        fileDialog.setMultiSelectionEnabled(false);
        int returnVal = fileDialog.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File f = fileDialog.getSelectedFile();
            XFile read = new XFile();
            if (f.getPath().contains(".txt")) {
                try {
                    read.readFileFoodTXT(f);
                } catch (IOException ex) {
                    Logger.getLogger(PaneAddFood.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if (f.getPath().contains(".docx")) {
                try {
                    read.readFileFoodDOCX(f);
                } catch (IOException ex) {
                    Logger.getLogger(PaneAddFood.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if (f.getPath().contains(".xlsx")) {
                
                try {
                    read.readFileFoodXLSX(f);
                } catch (IOException ex) {
                    Logger.getLogger(PaneAddFood.class.getName()).log(Level.SEVERE, null, ex);
                }                
            }
            loadTable();
        } else {
            return;
        }
    }//GEN-LAST:event_btnAddFileActionPerformed

    private void rdbRauCuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbRauCuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdbRauCuActionPerformed
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup btgLoaiTP;
    private javax.swing.JButton btnAddFile;
    private javax.swing.JButton btnAllFood;
    private javax.swing.JButton btnCapNhat;
    private javax.swing.JButton btnLamMoiTP;
    private javax.swing.JButton btnLuu;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnReturn;
    private javax.swing.JButton btnXoa;
    private javax.swing.JComboBox<String> cbxDonVi1;
    private javax.swing.JComboBox<String> cbxDonVi2;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JSeparator jSeparator10;
    private javax.swing.JToolBar.Separator jSeparator11;
    private javax.swing.JToolBar.Separator jSeparator4;
    private javax.swing.JToolBar.Separator jSeparator5;
    private javax.swing.JToolBar.Separator jSeparator7;
    private javax.swing.JToolBar.Separator jSeparator8;
    private javax.swing.JSeparator jSeparator9;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JLabel lblMaThucPham;
    private javax.swing.JPanel pnlLoaiTP;
    private javax.swing.JRadioButton rdbHat;
    private javax.swing.JRadioButton rdbRauCu;
    private javax.swing.JRadioButton rdbThitCa;
    private javax.swing.JSpinner spnKhoiLuong;
    private javax.swing.JSpinner spnKhoiLuongIt;
    private javax.swing.JTable tblThucPham;
    private javax.swing.JTextField txtGTDD;
    private javax.swing.JTextField txtGiaTien;
    private javax.swing.JTextField txtTenThucPham;
    // End of variables declaration//GEN-END:variables
}
