/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package viewForm;

import dao.GioHangDao;
import dao.KetQuaDao;
import dao.ThucPhamDao;
import helper.DataValidator;
import helper.MessageDialogHelper;
import java.awt.Color;
import java.awt.Container;
import java.io.File;
import java.io.IOException;
import static java.lang.String.valueOf;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;
import javax.swing.event.EventListenerList;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.plaf.ComponentUI;
import model.GioHang;
import model.ThucPham;
import helper.XFile;
import helper.CloseTab;
import static viewForm.FrmMain.back;
import static viewForm.FrmMain.indexList;
import static viewForm.FrmMain.listIndex;
import static viewForm.FrmMain.listPanel;
import static viewForm.FrmMain.pnlMain;
import static viewForm.FrmMain.now;
import static viewForm.FrmMain.listPanel;
import static viewForm.FrmMain.pnlMain;

/**
 *
 * @author Admin
 */
public class PaneCreateCart extends javax.swing.JPanel {

    private int numTabs;
    private FrmMain parent;

    /**
     * Creates new form PaneCreateCart
     */
    public PaneCreateCart() throws Exception {
        initComponents();
        createJTabbedPane();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator1 = new javax.swing.JSeparator();
        jToolBar1 = new javax.swing.JToolBar();
        jSeparator4 = new javax.swing.JToolBar.Separator();
        jButton2 = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        jSeparator6 = new javax.swing.JToolBar.Separator();
        btnOpenCart = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        btnAddCart = new javax.swing.JButton();
        btnSaveCart = new javax.swing.JButton();
        btnRemoveCart = new javax.swing.JButton();
        btnResultCart = new javax.swing.JButton();
        btnRemoveAllCart = new javax.swing.JButton();
        jSeparator7 = new javax.swing.JToolBar.Separator();
        btnReturn = new javax.swing.JButton();
        jSeparator11 = new javax.swing.JToolBar.Separator();
        btnSelectionFood = new javax.swing.JButton();
        btnNewFood = new javax.swing.JButton();
        btnDeleteFood = new javax.swing.JButton();
        btnAddFile = new javax.swing.JButton();
        jSeparator13 = new javax.swing.JToolBar.Separator();
        btnListCart = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        tabbedPaneCart = new javax.swing.JTabbedPane();

        jToolBar1.setRollover(true);
        jToolBar1.add(jSeparator4);

        jButton2.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        jButton2.setForeground(new java.awt.Color(135, 32, 32));
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Button-Blue-Arrow-Left-icon.png"))); // NOI18N
        jButton2.setText("Trang Trước");
        jButton2.setFocusable(false);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton2);

        btnNext.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        btnNext.setForeground(new java.awt.Color(135, 32, 32));
        btnNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Button-Green-Arrow-Left-icon.png"))); // NOI18N
        btnNext.setText("Trang Sau");
        btnNext.setFocusable(false);
        btnNext.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnNext.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnNext.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnNextMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnNextMouseExited(evt);
            }
        });
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });
        jToolBar1.add(btnNext);
        jToolBar1.add(jSeparator6);

        btnOpenCart.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        btnOpenCart.setForeground(new java.awt.Color(135, 32, 32));
        btnOpenCart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/foodfile-icon.png"))); // NOI18N
        btnOpenCart.setText("Mở Giỏ");
        btnOpenCart.setFocusable(false);
        btnOpenCart.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnOpenCart.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnOpenCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenCartActionPerformed(evt);
            }
        });
        jToolBar1.add(btnOpenCart);
        jToolBar1.add(jSeparator2);

        btnAddCart.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        btnAddCart.setForeground(new java.awt.Color(135, 32, 32));
        btnAddCart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icon_newcart2.png"))); // NOI18N
        btnAddCart.setText("Giỏ Mới");
        btnAddCart.setToolTipText("");
        btnAddCart.setFocusable(false);
        btnAddCart.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAddCart.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAddCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddCartActionPerformed(evt);
            }
        });
        jToolBar1.add(btnAddCart);

        btnSaveCart.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        btnSaveCart.setForeground(new java.awt.Color(135, 32, 32));
        btnSaveCart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/savecart_icon.png"))); // NOI18N
        btnSaveCart.setText("Lưu Lại");
        btnSaveCart.setFocusable(false);
        btnSaveCart.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSaveCart.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnSaveCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveCartActionPerformed(evt);
            }
        });
        jToolBar1.add(btnSaveCart);

        btnRemoveCart.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        btnRemoveCart.setForeground(new java.awt.Color(135, 32, 32));
        btnRemoveCart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/DeleteCart-icon.png"))); // NOI18N
        btnRemoveCart.setText("Xóa Giỏ");
        btnRemoveCart.setFocusable(false);
        btnRemoveCart.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnRemoveCart.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnRemoveCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveCartActionPerformed(evt);
            }
        });
        jToolBar1.add(btnRemoveCart);

        btnResultCart.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        btnResultCart.setForeground(new java.awt.Color(135, 32, 32));
        btnResultCart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/result_icon.png"))); // NOI18N
        btnResultCart.setText("Kết Quả");
        btnResultCart.setFocusable(false);
        btnResultCart.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnResultCart.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnResultCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResultCartActionPerformed(evt);
            }
        });
        jToolBar1.add(btnResultCart);

        btnRemoveAllCart.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        btnRemoveAllCart.setForeground(new java.awt.Color(135, 32, 32));
        btnRemoveAllCart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Shop_icon.png"))); // NOI18N
        btnRemoveAllCart.setText("Làm Mới");
        btnRemoveAllCart.setFocusable(false);
        btnRemoveAllCart.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnRemoveAllCart.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnRemoveAllCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveAllCartActionPerformed(evt);
            }
        });
        jToolBar1.add(btnRemoveAllCart);
        jToolBar1.add(jSeparator7);

        btnReturn.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        btnReturn.setForeground(new java.awt.Color(135, 32, 32));
        btnReturn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Arrow-refresh-icon.png"))); // NOI18N
        btnReturn.setText("Tải Lại");
        btnReturn.setFocusable(false);
        btnReturn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnReturn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnReturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReturnActionPerformed(evt);
            }
        });
        jToolBar1.add(btnReturn);
        jToolBar1.add(jSeparator11);

        btnSelectionFood.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        btnSelectionFood.setForeground(new java.awt.Color(135, 32, 32));
        btnSelectionFood.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/addlist2_icon.png"))); // NOI18N
        btnSelectionFood.setText("Chọn Thực Phẩm");
        btnSelectionFood.setFocusable(false);
        btnSelectionFood.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSelectionFood.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnSelectionFood.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectionFoodActionPerformed(evt);
            }
        });
        jToolBar1.add(btnSelectionFood);

        btnNewFood.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        btnNewFood.setForeground(new java.awt.Color(135, 32, 32));
        btnNewFood.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icon_newfood2.png"))); // NOI18N
        btnNewFood.setText("Thực Phẩm Mới");
        btnNewFood.setFocusable(false);
        btnNewFood.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnNewFood.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnNewFood.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewFoodActionPerformed(evt);
            }
        });
        jToolBar1.add(btnNewFood);

        btnDeleteFood.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        btnDeleteFood.setForeground(new java.awt.Color(135, 32, 32));
        btnDeleteFood.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/removefood-icon.png"))); // NOI18N
        btnDeleteFood.setText("Xóa thực phẩm");
        btnDeleteFood.setFocusable(false);
        btnDeleteFood.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnDeleteFood.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnDeleteFood.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteFoodActionPerformed(evt);
            }
        });
        jToolBar1.add(btnDeleteFood);

        btnAddFile.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        btnAddFile.setForeground(new java.awt.Color(135, 32, 32));
        btnAddFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/listcart-icon.png"))); // NOI18N
        btnAddFile.setText("Thêm Từ File");
        btnAddFile.setFocusable(false);
        btnAddFile.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAddFile.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAddFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddFileActionPerformed(evt);
            }
        });
        jToolBar1.add(btnAddFile);
        jToolBar1.add(jSeparator13);

        btnListCart.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnListCart.setForeground(new java.awt.Color(135, 32, 32));
        btnListCart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cart-icon.png"))); // NOI18N
        btnListCart.setText("Danh Sách");
        btnListCart.setFocusable(false);
        btnListCart.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnListCart.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnListCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListCartActionPerformed(evt);
            }
        });
        jToolBar1.add(btnListCart);
        jToolBar1.add(jSeparator3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 1452, Short.MAX_VALUE)
            .addComponent(tabbedPaneCart)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(tabbedPaneCart, javax.swing.GroupLayout.DEFAULT_SIZE, 802, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    public javax.swing.JPanel getUi() {
        return this;
    }

    public EventListenerList getListenerList() {
        return listenerList;
    }

    public void setListenerList(EventListenerList listenerList) {
        this.listenerList = listenerList;
    }

    private PaneAddCart createJPanel() {
        PaneAddCart panel = new PaneAddCart();
        return panel;

    }

    public JTabbedPane getTabbedPaneCart() {
        return tabbedPaneCart;
    }

    public void setTabbedPaneCart(JTabbedPane tabbedPaneCart) {
        this.tabbedPaneCart = tabbedPaneCart;
    }

    public void removeTab(int index) {
        tabbedPaneCart.remove(index);
        numTabs--;

//        if (index == numTabs - 1 && index > 0) {
//            tabbedPaneCart.setSelectedIndex(numTabs - 2);
//        } else {
//            tabbedPaneCart.setSelectedIndex(index);
//        }
        if (numTabs == 1) {
            tabbedPaneCart.add(createJPanel(), "Giỏ hàng " + String.valueOf(numTabs + 1),
                    numTabs++);
            tabbedPaneCart.setTabComponentAt(0, new CloseTab(this));
        }
    }

    public void createJTabbedPane() {
        /* create JTabbedPane */
        PaneAddCart panel = new PaneAddCart();
        tabbedPaneCart.add(panel, "Giỏ hàng " + String.valueOf(numTabs + 1), numTabs);
        tabbedPaneCart.setTabComponentAt(numTabs, new CloseTab(this));
        numTabs++;
        tabbedPaneCart.setVisible(true);
        tabbedPaneCart.setSelectedComponent(panel);
        tabbedPaneCart.getSelectedComponent().setBackground(Color.red);
    }

    public PaneAddCart getTabbedPaneSelect() {
        return (PaneAddCart) tabbedPaneCart.getSelectedComponent();
    }

    public void loadData(String id) throws Exception {
        getTabbedPaneSelect().loadData(id);
    }

    public void loadData(ArrayList<ThucPham> list) throws Exception {
        getTabbedPaneSelect().loadData(list);
    }

    private void btnAddCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddCartActionPerformed
        createJTabbedPane();
    }//GEN-LAST:event_btnAddCartActionPerformed

    private void btnRemoveCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveCartActionPerformed
        try {
            if (getTabbedPaneSelect().getListGioHang().size() == 0) {
                MessageDialogHelper.showWarningDialog(this, "Bạn không thể XÓA do giỏ hàng này\n đang rỗng.", "Cảnh báo");
                return;
            }
            if (MessageDialogHelper.showConfirmDialog(this, "Bạn có muốn xóa " + getTabbedPaneSelect().getTenGH() + " này hay không?", "Câu hỏi") == JOptionPane.YES_OPTION) {
                GioHangDao dao = new GioHangDao();
                StringBuilder sb = new StringBuilder();
                int sus = 0, fail = 0, a = 0;

                String id = getTabbedPaneSelect().getMaGH();
                KetQuaDao daokq = new KetQuaDao();
                if (daokq.deleteGioHang(id)) {
                    a++;
                }
                if (dao.delete(id)) {
                    sus++;
                } else {
                    fail++;
                }
                if (sus != 0) {
                    sb.append(sus + " giỏ hàng đã được XÓA thành công.");
                    int index = tabbedPaneCart.getSelectedIndex();
                    removeTab(index);
//                    if (index == 0) {
//                        removeTab(index + 1);
//                        createJTabbedPane();
//                    }
                }
                if (fail != 0) {
                    if (MessageDialogHelper.showConfirmDialog(this, "Giỏ hàng này không có trong danh sách.\nBạn có muốn ĐÓNG giỏ hàng hay không?", "Câu hỏi") == JOptionPane.YES_OPTION) {
                        int index = tabbedPaneCart.getSelectedIndex();
                        if (index == 0) {
                            removeTab(index);
                        }
                    } else {
                        return;
                    }
                }
                MessageDialogHelper.showMessageDialog(this, sb.toString(), "Thông báo");
            }
            return;
        } catch (Exception e) {
        }

    }//GEN-LAST:event_btnRemoveCartActionPerformed

    private void btnSelectionFoodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectionFoodActionPerformed
        DlogChooseFood selection = new DlogChooseFood(parent, true);
        selection.setVisible(true);
        ArrayList<String> list = selection.list;
        try {
            getTabbedPaneSelect().addThucPham(list);
        } catch (Exception ex) {
            Logger.getLogger(PaneCreateCart.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnSelectionFoodActionPerformed

    private void btnNewFoodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewFoodActionPerformed
        DlogAddNewFood selection = new DlogAddNewFood(parent, true);
        selection.setVisible(true);
        ArrayList<String> list = selection.list;
        try {
            getTabbedPaneSelect().addThucPham(list);
        } catch (Exception ex) {
            Logger.getLogger(PaneCreateCart.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnNewFoodActionPerformed

    private void btnSaveCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveCartActionPerformed
        try {
            if (getTabbedPaneSelect().getListGioHang().size() == 0) {
                MessageDialogHelper.showWarningDialog(this, "Bạn không thể LƯU do giỏ hàng này\nđang rỗng.", "Cảnh báo");
                return;
            }
            if (getTabbedPaneSelect().getTblKetQua() == 0) {
                MessageDialogHelper.showWarningDialog(this, "Bạn không thể LƯU do giỏ hàng này\nchưa có kết quả.", "Cảnh báo");
                return;
            }
            if (MessageDialogHelper.showConfirmDialog(this, "Bạn có muốn LƯU giỏ hàng này hay không?", "Câu hỏi") == JOptionPane.YES_OPTION) {
                getTabbedPaneSelect().luuKetQua();
            } else {
                GioHangDao dao = new GioHangDao();
                if (dao.findByID(getTabbedPaneSelect().getMaGH()) == null) {
                    getTabbedPaneSelect().setMaGH("");
                    getTabbedPaneSelect().setTenGH("");
                }
                return;
            }
        } catch (Exception ex) {
            Logger.getLogger(PaneCreateCart.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnSaveCartActionPerformed


    private void btnRemoveAllCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveAllCartActionPerformed
        ArrayList<ThucPham> list = new ArrayList<>();
        list = getTabbedPaneSelect().getListGioHang();
        getTabbedPaneSelect().getListGioHang().removeAll(list);
        getTabbedPaneSelect().getTxtSoTienMua().setText("");
        getTabbedPaneSelect().loadTableGioHang();
        getTabbedPaneSelect().loadTableKetQua();
    }//GEN-LAST:event_btnRemoveAllCartActionPerformed

    private void btnResultCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResultCartActionPerformed
        try {
            if (getTabbedPaneSelect().getListGioHang().size() == 0) {
                MessageDialogHelper.showWarningDialog(this, "Bạn không thể xem KẾT QUẢ do giỏ hàng này\nđang rỗng.", "Cảnh báo");
                return;
            }
            getTabbedPaneSelect().giaiThuat(1);
        } catch (Exception ex) {
            Logger.getLogger(PaneCreateCart.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnResultCartActionPerformed

    private void btnReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReturnActionPerformed
        getTabbedPaneSelect().loadTableGioHang();
        if (getTabbedPaneSelect().getTblKetQua() == 0) {
            return;
        }
        getTabbedPaneSelect().loadTableKetQua();
    }//GEN-LAST:event_btnReturnActionPerformed

    private void btnDeleteFoodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteFoodActionPerformed
        if (getTabbedPaneSelect().getListGioHang().size() == 0) {
            MessageDialogHelper.showWarningDialog(this, "Bạn không thể XÓA do giỏ hàng này\nđang rỗng.", "Cảnh báo");
            return;
        }
        if (MessageDialogHelper.showConfirmDialog(this, "Bạn có muốn XÓA  thực phẩm này hay không?", "Câu hỏi") == JOptionPane.YES_OPTION) {
            if (getTabbedPaneSelect().deleteList()) {
                MessageDialogHelper.showMessageDialog(this, getTabbedPaneSelect().c + " thực phẩm đã XÓA thành công.", "Thông báo");
            }
        }
        return;
    }//GEN-LAST:event_btnDeleteFoodActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        pnlMain.removeAll();
        int a = Integer.parseInt(listIndex.get(indexList - 1));
        if (a == 2 || a == 3 || a == 5) {
            if (a == 2) {
                PaneAddFood panel = (PaneAddFood) listPanel.get(a);
                panel.loadTable();
                pnlMain.add(panel);
            }
            if (a == 3) {
                PaneListFood panel = (PaneListFood) listPanel.get(a);
                panel.loadTable();
                pnlMain.add(panel);
            }
            if (a == 5) {
                PaneListCart panel = (PaneListCart) listPanel.get(a);
                panel.loadTable();
                pnlMain.add(panel);
            }

        } else {
            pnlMain.add(listPanel.get(a));
        }
        indexList--;
        if (Integer.parseInt(listIndex.get(indexList)) == 1) {
            listIndex.removeAll(listIndex);
            listIndex.add("1");
            indexList = 0;
        }
        pnlMain.updateUI();
        now = a;
    }//GEN-LAST:event_jButton2ActionPerformed

    private void btnNextMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnNextMouseEntered
        if (listIndex.size() == indexList + 1) {
            btnNext.setEnabled(false);
            btnNext.setToolTipText("Đây là trang cuối cùng!");
        }
    }//GEN-LAST:event_btnNextMouseEntered

    private void btnNextMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnNextMouseExited
        btnNext.setEnabled(true);
        btnNext.setToolTipText(null);
    }//GEN-LAST:event_btnNextMouseExited

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        if (listIndex.size() == indexList + 1) {
            return;
        }
        pnlMain.removeAll();
        int a = Integer.parseInt(listIndex.get(indexList + 1));
        if (a == 2 || a == 3 || a == 5) {
            if (a == 2) {
                PaneAddFood panel = (PaneAddFood) listPanel.get(a);
                panel.loadTable();
                pnlMain.add(panel);
            }
            if (a == 3) {
                PaneListFood panel = (PaneListFood) listPanel.get(a);
                panel.loadTable();
                pnlMain.add(panel);
            }
            if (a == 5) {
                PaneListCart panel = (PaneListCart) listPanel.get(a);
                panel.loadTable();
                pnlMain.add(panel);
            }

        } else {
            pnlMain.add(listPanel.get(a));
        }
        indexList++;
        pnlMain.updateUI();
        now = a;
    }//GEN-LAST:event_btnNextActionPerformed

    private void btnAddFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddFileActionPerformed
        final JFileChooser fileDialog = new JFileChooser();
        FileNameExtensionFilter file = new FileNameExtensionFilter("All files", "txt", "docx", "xlsx");
        fileDialog.setFileFilter(file);
        fileDialog.setMultiSelectionEnabled(false);
        int returnVal = fileDialog.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File f = fileDialog.getSelectedFile();
            XFile read = new XFile();
            if (f.getPath().contains(".txt")) {
                try {
                    getTabbedPaneSelect().loadData(read.readFileCartTXT(f), read.getSoTienMua());
                    return;
                } catch (IOException ex) {
                    Logger.getLogger(PaneAddFood.class.getName()).log(Level.SEVERE, null, ex);
                } catch (Exception ex) {
                    Logger.getLogger(PaneCreateCart.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if (f.getPath().contains(".docx")) {
                try {
                    getTabbedPaneSelect().loadData(read.readFileCartDOCX(f), read.getSoTienMua());
                } catch (IOException ex) {
                    Logger.getLogger(PaneCreateCart.class.getName()).log(Level.SEVERE, null, ex);
                } catch (Exception ex) {
                    Logger.getLogger(PaneCreateCart.class.getName()).log(Level.SEVERE, null, ex);
                }
                return;
            }
            if (f.getPath().contains(".xlsx")) {
                try {
                    getTabbedPaneSelect().loadData(read.readFileCartXLSX(f), read.getSoTienMua());
                } catch (IOException ex) {
                    Logger.getLogger(PaneCreateCart.class.getName()).log(Level.SEVERE, null, ex);
                } catch (Exception ex) {
                    Logger.getLogger(PaneCreateCart.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } else {
            return;
        }
    }//GEN-LAST:event_btnAddFileActionPerformed

    private void btnListCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListCartActionPerformed
        PaneListCart panel;
        panel = (PaneListCart) listPanel.get(5);
        pnlMain.removeAll();
        panel.loadTable();
        pnlMain.add(panel);
        listPanel.add(this);
        pnlMain.updateUI();
        listIndex.add(valueOf(4));
        indexList = listIndex.size() - 1;
        now = 5;
    }//GEN-LAST:event_btnListCartActionPerformed

    private void btnOpenCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenCartActionPerformed
         final JFileChooser fileDialog = new JFileChooser();
        FileNameExtensionFilter file = new FileNameExtensionFilter("All files", "txt", "docx", "xlsx");
        fileDialog.setFileFilter(file);
        fileDialog.setMultiSelectionEnabled(false);
        int returnVal = fileDialog.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File f = fileDialog.getSelectedFile();
            XFile read = new XFile();
             try {
                 getTabbedPaneSelect().loadData(read.openFile(f), read.getSoTienMua(), read.getSb(), read.getPhuongAn());
             } catch (Exception ex) {
                 Logger.getLogger(PaneCreateCart.class.getName()).log(Level.SEVERE, null, ex);
             }
        }

    }//GEN-LAST:event_btnOpenCartActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddCart;
    private javax.swing.JButton btnAddFile;
    private javax.swing.JButton btnDeleteFood;
    private javax.swing.JButton btnListCart;
    private javax.swing.JButton btnNewFood;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnOpenCart;
    private javax.swing.JButton btnRemoveAllCart;
    private javax.swing.JButton btnRemoveCart;
    private javax.swing.JButton btnResultCart;
    private javax.swing.JButton btnReturn;
    private javax.swing.JButton btnSaveCart;
    private javax.swing.JButton btnSelectionFood;
    private javax.swing.JButton jButton2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator11;
    private javax.swing.JToolBar.Separator jSeparator13;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JToolBar.Separator jSeparator4;
    private javax.swing.JToolBar.Separator jSeparator6;
    private javax.swing.JToolBar.Separator jSeparator7;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JTabbedPane tabbedPaneCart;
    // End of variables declaration//GEN-END:variables

    private Container getPnlMain() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private Container getjPanel1() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
